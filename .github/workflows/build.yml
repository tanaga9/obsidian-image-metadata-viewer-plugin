name: Build and Package Plugin

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Read plugin metadata (id, version)
        run: |
          node -e "console.log('ID='+require('./manifest.json').id)" >> "$GITHUB_ENV"
          node -e "console.log('VERSION='+require('./manifest.json').version)" >> "$GITHUB_ENV"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ID }}-${{ env.VERSION }}
          path: |
            manifest.json
            main.js
            styles.css
          if-no-files-found: error
          retention-days: 14

  release:
    # Only run on tag pushes and after build completes
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Read plugin metadata (id, version)
        run: |
          node -e "console.log('ID='+require('./manifest.json').id)" >> "$GITHUB_ENV"
          node -e "console.log('VERSION='+require('./manifest.json').version)" >> "$GITHUB_ENV"
          node -e "console.log('VERSION_PKG='+require('./package.json').version)" >> "$GITHUB_ENV"
          node -e "console.log('NAME='+require('./manifest.json').name)" >> "$GITHUB_ENV"
          node -e "console.log('MIN_APP='+require('./manifest.json').minAppVersion)" >> "$GITHUB_ENV"
          echo "VERSION_TAG=${GITHUB_REF_NAME#v}" >> "$GITHUB_ENV"

      - name: Compare versions and fail if mismatched
        shell: bash
        run: |
          echo "Tag:         $VERSION_TAG"
          echo "manifest:    $VERSION"
          echo "package.json:$VERSION_PKG"
          if [ "$VERSION_TAG" != "$VERSION" ] || [ "$VERSION_TAG" != "$VERSION_PKG" ]; then
            echo "❌ Version mismatch: tag=$VERSION_TAG, manifest.json=$VERSION, package.json=$VERSION_PKG" >&2
            exit 1
          fi
          echo "✅ Version match: $VERSION_TAG"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ID }}-${{ env.VERSION }}
          path: release

      - name: Package single zip for Release
        run: |
          if [ -f release/styles.css ]; then
            zip -j "release/${ID}-${VERSION}.zip" release/manifest.json release/main.js release/styles.css
          else
            zip -j "release/${ID}-${VERSION}.zip" release/manifest.json release/main.js
          fi

      - name: Generate Release Notes (manual install guide)
        shell: bash
        run: |
          ZIP_PATH="release/${ID}-${VERSION}.zip"
          SHA256=$(sha256sum "$ZIP_PATH" | awk '{print $1}')
          cat > release/RELEASE_NOTES.md << EOF
          ${NAME} ${VERSION}
          
          Manual Install (without Community plugin browser)
          
          - Requirements: Obsidian ${MIN_APP}+ on Desktop (Windows/macOS/Linux)
          - Download: ${ID}-${VERSION}.zip from this release
          - Close Obsidian or disable the plugin before replacing files
          - Install path: put the extracted files into your Vault at:
            - Windows: _(Path to Vault)_ \\\\.obsidian\\plugins\\${ID}
            - macOS/Linux: _(Path to Vault)_ /.obsidian/plugins/${ID}
          - Final contents inside the folder should be:
            - manifest.json
            - main.js
            - styles.css (if present)
          - Reopen Obsidian (or re-enable the plugin) and verify under Settings → Community plugins
          
          Notes
          - This release ships only the plugin files (no external network access needed)
          - SHA-256 (${ID}-${VERSION}.zip):
            ${SHA256}
          - If updating, replace existing files in the same plugin folder
          
          Troubleshooting
          - If the plugin does not appear, confirm the folder name is exactly "${ID}" and that manifest.json is directly inside it
          - Ensure the app version meets the minimum (${MIN_APP})
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.ID }} ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            release/*.zip
          body_path: release/RELEASE_NOTES.md
