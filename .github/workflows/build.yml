name: Build and Package Plugin

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Read plugin metadata (id, version)
        run: |
          node -e "console.log('ID='+require('./manifest.json').id)" >> "$GITHUB_ENV"
          node -e "console.log('VERSION='+require('./manifest.json').version)" >> "$GITHUB_ENV"

      - name: Package release files
        run: |
          mkdir -p dist
          zip -j "dist/${ID}-${VERSION}.zip" manifest.json main.js styles.css || true
          # Fallback: if styles.css does not exist, create a zip with the required files only
          if [ ! -s "dist/${ID}-${VERSION}.zip" ]; then
            zip -j "dist/${ID}-${VERSION}.zip" manifest.json main.js
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ID }}-${{ env.VERSION }}
          path: dist/*.zip
          if-no-files-found: error
          retention-days: 14

  release:
    # Only run on tag pushes and after build completes
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Read plugin metadata (id, version)
        run: |
          node -e "console.log('ID='+require('./manifest.json').id)" >> "$GITHUB_ENV"
          node -e "console.log('VERSION='+require('./manifest.json').version)" >> "$GITHUB_ENV"
          node -e "console.log('VERSION_PKG='+require('./package.json').version)" >> "$GITHUB_ENV"
          echo "VERSION_TAG=${GITHUB_REF_NAME#v}" >> "$GITHUB_ENV"

      - name: Compare versions and fail if mismatched
        shell: bash
        run: |
          echo "Tag:         $VERSION_TAG"
          echo "manifest:    $VERSION"
          echo "package.json:$VERSION_PKG"
          if [ "$VERSION_TAG" != "$VERSION" ] || [ "$VERSION_TAG" != "$VERSION_PKG" ]; then
            echo "❌ Version mismatch: tag=$VERSION_TAG, manifest.json=$VERSION, package.json=$VERSION_PKG" >&2
            exit 1
          fi
          echo "✅ Version match: $VERSION_TAG"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ID }}-${{ env.VERSION }}
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.ID }} ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            dist/*.zip
